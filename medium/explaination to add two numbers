You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

 

Example 1:


Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.
Example 2:

Input: l1 = [0], l2 = [0]
Output: [0]
Example 3:

Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]
 

Constraints:

The number of nodes in each linked list is in the range [1, 100].
0 <= Node.val <= 9
It is guaranteed that the list represents a number that does not have leading zeros.









Position	l1	l2	Sum	Carry	Result Node
 0	       2 	5	   7	  0	     7
 1	       4	6	   10	  1	     0
 2	       3	4	 8 + 1 (carry) = 9	0	8

So the result linked list becomes:
[7, 0, 8] → represents 807 (since it's also in reverse)

Step-by-step with Carry
1st place (unit):

2 + 5 = 7, no carry

store 7 → result = [7]

2nd place (tens):

4 + 6 = 10 → carry = 1, digit = 0

store 0 → result = [7, 0]

3rd place (hundreds):

3 + 4 + carry(1) = 8

store 8 → result = [7, 0, 8]

